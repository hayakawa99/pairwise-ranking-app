from sqlalchemy.orm import Session
from app.db.session import SessionLocal
from app.db.models.theme import Theme
from app.db.models.option import Option

def seed():
    db: Session = SessionLocal()

    themes = [
        {
            "title": "どちらの考え方をもっと大事にしたい？",
            "options": [
                "静かに続ける人が一番強い",
                "「誰にも見られていない時の行動が本質」",
                "選ばないことも意志の表現",
                "謙虚であることは、怠けより難しい",
                "心の中で誰かを肯定してる時間が多い人が勝ち",
                "やる気がある時にやるのは当たり前",
                "優しさは「余裕のある時だけの行動」ではない",
                "うまく言葉にできない気持ちも尊重すべき",
                "行動より「誰のために」がすべてを決める",
                "怒らない人が鈍いとは限らない",
                "無関心よりも、不器用な関心に価値がある",
                "正しさより誠実さ",
                "自分を許せる人は、他人も許せる",
                "感情を隠すことが必ずしも冷たさではない",
                "礼儀はその人の内面を語る",
                "「変わらない」努力もある",
                "あきらめることも選択肢の一つ",
                "優しさに理由はいらない",
                "気まずい沈黙を受け入れられる関係が本物",
                "自分のペースを守る勇気",
                "知ってても黙ってる判断",
                "勇気のある人より、我慢してる人に敬意",
                "「合わない」を無理に直そうとしない",
                "不安を口にできる関係が一番安心",
                "許すことは、甘やかすことと違う",
                "記録に残らなくても意味はある",
                "比較しない努力は、継続より難しい",
                "難しいことを難しいまま受け入れる",
                "気にしない強さより、気にしても動ける強さ",
                "理解されなくても続けること",
                "見栄を張らない美学",
                "感謝を言葉にするのは照れくさくていい",
                "安心感は正しさより価値がある",
                "相手の話を最後まで聞くことが思いやり",
                "結論を急がないほうが深まることもある",
                "他人の幸せを喜べる器",
                "苦手なことにも時間をかけて向き合う姿勢",
                "丁寧さはスピードに勝るときがある",
                "「そのままでいい」と言える勇気",
                "自分が正しいと思う時こそ立ち止まる",
                "相手の時間を奪わない配慮",
                "自分を責めすぎないことも強さ",
                "間違いを認めることが一番の成長",
                "親切は相手のリズムを壊さないこと",
                "「頑張らなくていい」と言ってあげられる余裕",
                "言葉を飲み込むことも思いやり",
                "場の空気を変えるより読める方が難しい",
                "深く考えることを面倒だと思わない",
                "落ち着いている人の裏には戦いがある",
                "優しい人ほど、いちばん傷ついてきた",
            ]
        },
        {
            "title": "“この人、いいな”と思う瞬間は？",
            "options": [
                "空気を和らげる冗談を自然に言える人",
                "静かに誰かのミスをフォローしてる人",
                "荷物が多い人にさっとドアを開けてあげる人",
                "誰にでも敬語を崩さず丁寧に接する人",
                "店員さんにも笑顔でありがとうを言える人",
                "道を聞かれたら一緒に調べてくれる人",
                "言いにくいことを優しく伝えてくれる人",
                "誰かが話してるときにスマホを見ない人",
                "忘れかけてた話題をちゃんと覚えてる人",
                "さりげなく水をついでくれる人",
                "集団で目立たない子にも自然に話を振る人",
                "帰り道に「気をつけてね」と一言添えてくれる人",
                "自分の失敗を笑って話せる人",
                "挨拶の声がちゃんと届く人",
                "体調が悪いときに気づいてくれる人",
                "後ろに人がいるときにドアを押さえてる人",
                "「自分が言いたいこと」より「相手がどう受け取るか」を気にする人",
                "待ち合わせに時間ぴったりで来る人",
                "エレベーターで全員乗るまでボタンを押さえてくれてる人",
                "咄嗟に「ごめん」と言える人",
                "褒められたときに照れながらもちゃんと「ありがとう」と言える人",
                "混んでる電車で自然に席を譲る人",
                "遅刻しても言い訳せずに「ごめん」と言える人",
                "忙しい中でも「ちゃんと聞いてるよ」と目を見てくれる人",
                "自分の意見と違っても人を否定しない人",
                "予定が変わっても文句を言わない人",
                "困ってる人を見てまず動ける人",
                "「どう思う？」と意見を聞いてくれる人",
                "小さな変化に気づいて声をかけてくれる人",
                "誰かの噂話をさりげなく止める人",
                "順番を自然に譲れる人",
                "誰の前でも態度が変わらない人",
                "あだ名じゃなくて名前で呼んでくれる人",
                "「その考えもいいね」と返してくれる人",
                "一緒にいて静かでも気まずくならない人",
                "思い出話のときに「あなたがいたから楽しかった」と言ってくれる人",
                "何かしてくれたあとに「気にしないで」と言ってくれる人",
                "うまく言えない話を最後まで聞いてくれる人",
                "誰かの成功を素直に喜べる人",
                "他人の努力にちゃんと気づいて言葉をかけられる人"
            ]
        }
    ]

    for theme_data in themes:
        existing = db.query(Theme).filter(Theme.title == theme_data["title"]).first()
        if existing:
            print(f"テーマ「{theme_data['title']}」はすでに存在します。スキップします。")
            continue

        theme = Theme(title=theme_data["title"])
        db.add(theme)
        db.flush()

        for label in theme_data["options"]:
            db.add(Option(label=label, rating=1500.0, wins=0, losses=0, shown_count=0, theme_id=theme.id))

        print(f"テーマ「{theme_data['title']}」と {len(theme_data['options'])} 件の選択肢を登録します。")

    db.commit()
    db.close()
    print("シード完了。")

if __name__ == "__main__":
    seed()
