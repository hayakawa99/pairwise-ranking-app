version: "3.8"

services:
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./frontend:/frontend
      - ./backend/.env:/app/.env
      - ./backend/.env.test:/app/.env.test
      - ./backend/entrypoint.sh:/app/entrypoint.sh
      # - ./directory_structure.txt:/app/directory_structure.txt   # ← 削除
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - backend/.env
      - backend/.env.test

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    working_dir: /app
    command: npm run dev
    env_file:
      - ./frontend/.env.local

  db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: appdb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10

  test-db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: testdb
    ports:
      - "5433:5432"
    volumes:
      - test_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10

  backend-test:
    build:
      context: ./backend
      dockerfile: Dockerfile.test
    depends_on:
      test-db:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - ./backend/.env.test:/app/.env.test
    env_file:
      - backend/.env.test
    command: ./entrypoint.test.sh

volumes:
  postgres_data:
  test_postgres_data:
